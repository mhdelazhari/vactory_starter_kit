<?php

/**
 * @file
 * Vactory Espace prive custom module related hooks.
 */

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_theme().
 */
function vactory_espace_prive_theme($existing, $type, $theme, $path) {
  return [
    'espace_prive_login' => [
      'template' => 'espace-prive-login',
      'variables' => [
        'login_form' => NULL,
      ],
    ],
    'espace_prive_registration' => [
      'template' => 'espace-prive-registration',
      'variables' => [
        'registration_form' => NULL,
      ],
    ],
    'espace_prive_profile' => [
      'template' => 'espace-prive-profile',
      'variables' => [
        'profile_form' => NULL,
      ],
    ],
    'espace_prive_password' => [
      'template' => 'espace-prive-password',
      'variables' => [
        'password_form' => NULL,
      ],
    ],
    'block_espace_prive_user_menu' => [
      'template' => 'block-espace-prive-user-menu',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_espace_prive_preprocess_page(&$variables) {
  $current_path = Drupal::service('path.current')->getPath();
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (is_default_user_path()) {
    $espace_prive_settings = \Drupal::config('vactory_espace_prive.settings');
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $espace_prive_path_login = $espace_prive_settings->get('path_login');
    $espace_prive_path_login = strpos($espace_prive_path_login, '/') !== 0 ? '/' . $espace_prive_path_login : $espace_prive_path_login;
    $espace_prive_path_password = $espace_prive_settings->get('path_password');
    $espace_prive_path_password = strpos($espace_prive_path_password, '/') !== 0 ? '/' . $espace_prive_path_password : $espace_prive_path_password;
    $espace_prive_paths = [
      $espace_prive_path_login,
      '/' . $langcode . $espace_prive_path_login,
      $espace_prive_path_password,
      '/' . $langcode . $espace_prive_path_password,
    ];
    $user_paths = get_user_paths();
    $user_paths = array_merge(
      $user_paths['login_paths'],
      $user_paths['password_paths']
    );
    if (in_array($current_path, $user_paths) && !in_array($current_path, $espace_prive_paths) && $route_name != 'system.404') {
      throw new NotFoundHttpException();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_espace_prive_preprocess_input__password(&$variables) {
  if ($variables['element']['#type'] == 'password') {
    $title = $variables['element']['#id'] == 'edit-pass-pass1' ? t('Mot de passe') : t('Confirmer le mot de passe');
    $title = $variables['element']['#id'] == 'edit-current-pass' ? t('Mot de passe actuel') : $title;
    $title = $variables['element']['#id'] == 'edit-pass' ? t('Enter your password') : $title;
    $variables['attributes']['placeholder'] = $title;
  }
}

/**
 * Check if current path is a user context path.
 */
function is_default_user_path() {
  $current_path = Drupal::service('path.current')->getPath();
  $user_paths = get_user_paths();
  $user_paths = array_merge(
    $user_paths['login_paths'],
    $user_paths['password_paths']
  );
  $is_default_user_path = FALSE;
  if (in_array($current_path, $user_paths)) {
    $is_default_user_path = TRUE;
  }
  return $is_default_user_path;
}

/**
 * Get necessary user paths.
 */
function get_user_paths() {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  return [
    'login_paths' => [
      '/user/login',
      '/' . $langcode . '/user/login',
    ],
    'password_paths' => [
      '/user/password',
      '/' . $langcode . '/user/password',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function vactory_espace_prive_page_attachments(array &$attachments) {
  $current_route = Drupal::routeMatch()->getRouteName();
  $rout_names = [
    'user.login',
    'user.register',
    'vactory_espace_prive.register',
    'vactory_espace_prive.login',
  ];
  $espace_prive_config = Drupal::config('vactory_espace_prive.settings');
  if (in_array($current_route, $rout_names)) {
    if (in_array($current_route, ['user.login', 'vactory_espace_prive.login'])) {
      $meta_title = $espace_prive_config->get('metatag_register_title');
      $meta_description = $espace_prive_config->get('metatag_register_description');
    }
    if (in_array($current_route, ['user.register', 'vactory_espace_prive.register'])) {
      $meta_title = $espace_prive_config->get('metatag_login_title');
      $meta_description = $espace_prive_config->get('metatag_login_description');
    }
    if (!empty($meta_title)) {
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'title',
            'content' => $meta_title,
          ],
        ],
        'title',
      ];
    }
    if (!empty($meta_description)) {
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'description',
            'content' => $meta_description,
          ],
        ],
        'description',
      ];
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vactory_espace_prive_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_route = Drupal::routeMatch()->getRouteName();
  if ($current_route == "vactory_espace_prive.cleaned_profile") {
    $form['#attached']['library'][] = 'vactory_espace_prive/script.auto_upload';
    if ($form_state->getValue('user_picture') != null) {
      $fid = $form_state->getValue('user_picture')['0']['fids']['0'];
      $current_user = \Drupal::currentUser();
      $user = \Drupal::entityTypeManager()->getStorage('user')
      ->load($current_user->id());
        $user->set('user_picture', $fid);
        $user->save();
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function vactory_espace_prive_element_info_alter(array &$info) {
  $current_route = Drupal::routeMatch()->getRouteName();
  if (isset($info['managed_file']) && $current_route == "vactory_espace_prive.cleaned_profile") {
    $info['managed_file']['#process'][] = 'vactory_espace_prive_managed_file_process';
    $info['managed_file']['#attached']['library'][] = 'vactory_espace_prive/command.managed_file_upload_complete_event_command';
  }

}

/**
 * Custom ajax callback for managed files.
 *
 * Overrides \Drupal\file\Element\ManagedFile::uploadAjaxCallback()
 *
 * @see \Drupal\file\Element\ManagedFile::uploadAjaxCallback
 */
function vactory_espace_prive_managed_file_ajax_callback(array &$form, FormStateInterface $form_state) {
  $response = \Drupal\file\Element\ManagedFile::uploadAjaxCallback($form, $form_state, \Drupal::request());
  $response->addCommand(new \Drupal\vactory_espace_prive\Ajax\ManagedFileUploadCompleteEventCommand($form, $form_state));
  return $response;
}

/**
 * Custom process callback added to managed_file elements.
 *
 * Replaces the original #ajax callback with a custom one.
 */
function vactory_espace_prive_managed_file_process(array &$element, FormStateInterface $form_state) {
  $current_route = Drupal::routeMatch()->getRouteName();
  if ($current_route == "vactory_espace_prive.cleaned_profile") {
    $element['upload_button']['#ajax']['callback'] = 'vactory_espace_prive_managed_file_ajax_callback';
  }
  return $element;
}


