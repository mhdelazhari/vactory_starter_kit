{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set card_id = "card--mediatheque_" ~ elements['#node'].nid.value %}
{% set image_uri = file_object(content.field_vactory_media.0['#item'].target_id).uri.value %}
{% set image_url = image_uri | file_url %}
{% set nid = elements['#node'].nid.value %}
{% set title = label %}
{% set image = addAttributes(content.field_vactory_media, {'class': ['vf-card__image', 'img-fluid']}) %}
{% set subtitle = content.field_mediatheque_theme.0['#title'] %}
{% set intro = content.field_vactory_excerpt %}
{% set read_more = 'Read more'|t %}
{% set media_object = (content.field_vactory_media_document.0 is not empty) ? get_media(content.field_vactory_media_document.0['#media'].mid.value) : '' %}
{% set document = (media_object is not empty) ? file_object(media_object.field_media_file.0.target_id) : '' %}
{% set document_url = (document is not empty) ? file_url(document.uri.value) : ''  %}
{% set date = content.field_mediatheque_date.0['#markup'] %}
{% set video_url = content.youtube_id is defined and content.youtube_id is not empty ? 'https://youtube.com/embed/' ~ content.youtube_id : '' %}

{#
/**
 * @file
 * Article Component.
 * themes/interface/src/scss/stylesheets/components/article/_article.scss
 */
#}
{% if classes is not defined %}
  {% set classes = [] %}
{% endif %}
{% set classes = classes|merge(['card', 'card--mediatheque']) %}

<article  {{ attributes.addClass(classes) }}>
  <div class="card__image">
    <a href="#{{card_id}}" data-fancybox>
      {{ image }}
    </a>
    {% block image_after %}{% endblock %}
  </div>

  <div class="card__body">
    {{ contextual_links }}

    {% if subtitle %}
      <div class="card__meta">
        {% block subtitle %}
          <span class="card__tag badge badge-primary">{{ subtitle }}</span>
          <span class="card__date">{{ date }}</span>
        {% endblock %}
      </div>
    {% endif %}

    {{ title_prefix }}
    <h3{{ title_attributes }} class="card__title">
      <span>{{ title }}</span>
    </h3>
    {{ title_suffix }}

    <div class="card__attached-assets ">
      {% if video_url is not empty %}
          <a href="#{{card_id}}" data-fancybox class="prefix-icon-eye">{{'Voir la video'|t}}</a>
      {% endif %}

      {% if document_url is defined  and document_url is not empty %}
          <a href="{{ document_url }}" class="prefix-icon-download" download>{{'Télécharger le fichier'|t}}</a>
      {% endif %}
    </div>
  </div>
</article>

<div class="fancybox-is-hidden fancy_card" id="{{card_id}}">
  <div class="card__image">
    {% if video_url is empty %}
      {{ image }}
    {% else %}
      <iframe src="{{ video_url }}" width="850" height="500">
      </iframe>
    {% endif %}
  </div>

  <div class="card__body">
    {{ contextual_links }}
    {% if subtitle %}
      <div class="card__meta">
          <span class="card__tag badge badge-primary">{{ subtitle }}</span>
          <span class="card__date">{{ date }}</span>
      </div>
    {% endif %}

    {{ title_prefix }}
    <h3{{ title_attributes }} class="card__title">
      <span>{{ title }}</span>
    </h3>
    {{ title_suffix }}

    <div class="card__read-more">
      {% if video_url is not empty %}
        <div class="card__link ">
        <div class="form-group">
          <label for="video_link">{{ 'Copier ce lien pour partager la video'|t }}</label>
          <input type="text" id="video_link" class="form-control" name="video_link" value="{{ video_url }}"/>
        </div>
        </div>
      {% endif %}

      {% if document_url is defined  and document_url is not empty %}
        <div class="card__link">
          <a href="{{ document_url }}" class="btn btn-primary prefix-icon-download mb-2" download>{{ 'Télécharger'|t }}</a>
        </div>
      {% endif %}
    </div>


  </div>
</div>
